<?xml version="1.0" encoding="UTF-8"?><xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform"><xsl:import href="Controller_php.xsl"/><!-- --><xsl:variable name="CONTROLLER_ID" select="'Graph'"/><!-- --><xsl:output method="text" indent="yes"			doctype-public="-//W3C//DTD XHTML 1.0 Strict//EN" 			doctype-system="http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd"/>			<xsl:template match="/">	<xsl:apply-templates select="metadata/controllers/controller[@id=$CONTROLLER_ID]"/></xsl:template><xsl:template match="controller"><![CDATA[<?php]]>//localhost/beton/index.php?c=Graph_Controller&f=get_plant_load&v=ViewXML&date_time_from=17/06/2013 07:00&date_time_to=18/06/2013 06:59:59require_once(FRAME_WORK_PATH.'basic_classes/Controller.php');require_once(FRAME_WORK_PATH.'basic_classes/ModelVars.php');require_once(FRAME_WORK_PATH.'basic_classes/FieldExtDateTime.php');//include("common/pChart2.1.3/class/pData.class.php");include("common/pChart2.1.3/class/pDraw.class.php");include("common/pChart2.1.3/class/pImage.class.php");class Graph_Controller extends Controller{	const CACHE_PATH = 'graph_img/';		public function __construct(){		parent::__construct();		$param_from = new FieldExtDateTime('date_time_from'				,array('required'=>TRUE));				$param_to = new FieldExtDateTime('date_time_to'				,array('required'=>TRUE));								$pm = new PublicMethod('get_plant_load');		$pm->addParam($param_from);						$pm->addParam($param_to);		$this->addPublicMethod($pm);				$pm = new PublicMethod('make_plant_load');		$pm->addParam($param_from);		$pm->addParam($param_to);		$this->addPublicMethod($pm);						$pm = new PublicMethod('clear_cache');		$pm->addParam(new FieldExtDateTime('date_from'				,array('required'=>TRUE)));		$pm->addParam(new FieldExtDateTime('date_to'				,array('required'=>TRUE)));		$this->addPublicMethod($pm);					}	public static function plant_load_cache_name($dt_from,$dt_to){		return Graph_Controller::CACHE_PATH."plant_load_".date("d_m_y_H_i",$dt_from)."_".date("d_m_y_H_i",$dt_to).".png";	}	private function get_contents($cache){		$im = imagecreatefrompng($cache);		ob_start();		imagepng($im);			$contents =  ob_get_contents();		ob_end_clean();				return $contents;	}	/* ???? Переделать очистку кэша из контроллеров*/	public static function clearCache($date_from,$date_to,$on_slave=FALSE){		if (file_exists($file_name = Graph_Controller::plant_load_cache_name($date_from,$date_to))){			unlink($file_name);		}		//remove files on other servers		if (!$on_slave &amp;&amp; CHART_SERVERS_LIST){						$serv_ar = explode(',',CHART_SERVERS_LIST);			$user_name = $_SESSION['user_name'];			$user_pwd = $_SESSION['user_pwd'];			$login_templ = 'http://%s/beton/index.php?c=User_Controller&f=login&name=%s&pwd=%s&v=RespCode';			$clear_cache_templ = 'http://%s/beton/index.php?c=Graph_Controller&f=clear_cache&date_from=%s&date_to=%s&v=RespCode';			foreach($serv_ar as $ip){								if ($stream = fopen(sprintf($login_templ,$ip,urlencode($user_name),urlencode($user_pwd)), 'r')){					$contents = stream_get_contents($stream);					fclose($stream);					if ($contents=='0' &amp;&amp; $http_response_header){						$cookie = '';						foreach($http_response_header as $v){							$ps = strpos($v,'Set-Cookie:');							if ($ps!==FALSE){								$cookie = substr($v,$ps+12);								break;							}						}						$options = array( 'http' => array(								'header'=>"Cookie: ".$cookie."\r\n"						) );						$context = stream_context_create($options);						if ($stream = fopen(sprintf($clear_cache_templ,$ip,urlencode(date('d/m/y H:i',$date_from)),urlencode(date('d/m/y H:i',$date_to))), 'r',FALSE,$context)){							fclose($stream);						}					}									}			}		}	}			private function make_load_graph($date_from,$date_to,$cache){		$dt1 = date('Y-m-d H:i:s',$date_from);		$dt2 = date('Y-m-d H:i:s',$date_to);		$dbLink = new DB_Sql;		$dbLink->appname = APP_NAME;		$dbLink->technicalemail = TECH_EMAIL;		$dbLink->reporterror = DEBUG;		$dbLink->database	= DB_NAME;		$dbLink->connect(DB_SERVER,DB_USER,DB_PASSWORD);						$consts = $dbLink->query_first("SELECT			constant_max_hour_load() AS max_h_load,			constant_chart_step_min() AS step_min");		if (!$consts || !is_array($consts)){			throw new Exception("Constants not defined!");		}		$query_orders =sprintf("			SELECT  date_time,date_time_to,				quant,unload_speed			FROM orders			WHERE date_time BETWEEN '%s' AND '%s'			ORDER BY date_time",$dt1,$dt2);		$query_shipments = sprintf("			SELECT ship_date_time,			quant AS quant_shipped			FROM shipments			WHERE ship_date_time BETWEEN '%s' AND '%s'			ORDER BY ship_date_time",$dt1,$dt2);								$chart_data = array();				$QUANT_NORM_ON_STEP = ceil($consts['max_h_load']*$consts['step_min']/60);				$STEP_MIL_SEC = $consts['step_min']*60;				//all points to chart		for ($i=$date_from;$i<$date_to;$i+=$STEP_MIL_SEC){			$chart_data[$i] = array("time"=>$i,				"orders"=>0,"shipments"=>0,				"norm"=>$QUANT_NORM_ON_STEP);		}		//orders		$dbLink->query($query_orders);		while ($ar = $dbLink->fetch_array()){			$order_unload_speed = $ar['unload_speed']*$consts['step_min']/60;			$quant = $ar['quant'];			$time_from = strtotime($ar['date_time']);			$time_to = strtotime($ar['date_time_to']);			for ($i=$time_from;$i<$time_to;$i+=$STEP_MIL_SEC){				$quant_cur = min($quant,$order_unload_speed);								$chart_data[$i]["orders"]+= $quant_cur;				$quant-=$quant_cur;							if ( (($i+$STEP_MIL_SEC)>=$time_to)					&amp;&amp; $quant>0){					//last iteration					$chart_data[$i]["orders"]+= $quant;				}			}		}				//shipment		$dbLink->query($query_shipments);		while ($ar = $dbLink->fetch_array()){			$seconds = strtotime($ar['ship_date_time']);			$ind = round($seconds / ($consts['step_min'] * 60)) * ($consts['step_min'] * 60);			$chart_data[$ind]["shipments"]+= $ar["quant_shipped"];		}		//var_dump($chart_data);		//exit;				$shipments = array();		$norm = array();		$orders = array();		$times = array();						foreach ($chart_data as $d){			array_push($times,date('H:i',$d["time"]));			array_push($norm,$d["norm"]);			array_push($orders,$d["orders"]);			array_push($shipments,$d["shipments"]);		}				/* Create and populate the pData object */		$MyData = new pData();  		$MyData->addPoints($norm,"Макс.загрузка");		$MyData->addPoints($orders,"Заявки");		$MyData->addPoints($shipments,"Отгрузки");		$MyData->setSerieWeight("Отгрузки",2); 		$MyData->setSerieWeight("Заявки",2); 		//$MyData->setSerieWeight("Макс.загрузка",2); 		$MyData->setAxisName(0,"объем");				$MyData->setSerieTicks("Макс.загрузка",3);		$MyData->addPoints($times,"Timestamp");		$MyData->setAbscissa("Timestamp");		$MyData->setXAxisName("время");		//$MyData->setXAxisDisplay(AXIS_FORMAT_TIME,"H:i");		/* Create the pChart object */		$myPicture = new pImage(930,210,$MyData);		/* Turn of AAliasing */		$myPicture->Antialias = TRUE;		/* Draw the border */		$myPicture->drawRectangle(0,0,929,209,array("R"=>0,"G"=>0,"B"=>0));		$myPicture->setFontProperties(array("FontName"=>FONT_FILE,"FontSize"=>6));				$myPicture->drawText(30,20,			date('d/m',$date_from).'-'.date('d/m',$date_to),			array("FontSize"=>12));		/* Define the chart area */		$myPicture->setGraphArea(25,15,880,170);		/* Draw the scale */		//$scaleSettings = array("XMargin"=>0,"YMargin"=>0,"Floating"=>TRUE,"GridR"=>200,"GridG"=>200,"GridB"=>200,"DrawSubTicks"=>TRUE,"CycleBackground"=>TRUE);		//$myPicture->drawScale($scaleSettings);		$AxisBoundaries = array(0=>array("Min"=>0,"Max"=>$consts['step_min']*2));		$ScaleSettings  = array("Mode"=>SCALE_MODE_MANUAL,			"ManualScale"=>$AxisBoundaries,			"DrawSubTicks"=>TRUE,"DrawArrows"=>TRUE,			"ArrowSize"=>6			);//"LabelSkip"=>1		$myPicture->drawScale($ScaleSettings); 				/* Draw the step chart */		//$myPicture->drawStepChart();		$Config = array("BreakVoid"=>FALSE);		$myPicture->drawLineChart($Config);		//array("DisplayColor"=>DISPLAY_MANUAL,"DisplayR"=>0,"DisplayG"=>0,"DisplayB"=>0)		/* Write the chart legend */		$myPicture->drawLegend(590,17,array("Style"=>LEGEND_NOBORDER,"Mode"=>LEGEND_HORIZONTAL));		/* Render the picture (choose the best way) */		$myPicture->render($cache);	}		public function get_plant_load(){		$date_from = $pm->getParamValue('date_time_from');		$date_to = $pm->getParamValue('date_time_to');				$cache = Graph_Controller::plant_load_cache_name($date_from,$date_to);				//		//$this->make_load_graph($date_from,$date_to,$cache);		//exit;				$busy_flag = Graph_Controller::CACHE_PATH.md5('plant_load_'.date("d_m_y_H_i",$date_from).'_'.date("d_m_y_H_i",$date_to)).'.bsy';		$contents = null;		$tries = 2;		$sleep_interv = 5;				while ($tries){			if (file_exists($cache)){				try{					$contents = $this->get_contents($cache);				}				catch (Exception $e){								}			}			if (isset($contents)){				break;			}			else if (file_exists($busy_flag)){				sleep($sleep_interv);			}			else{				//make new graph				try{					$handle = fopen($busy_flag, "w");				}				catch (Exception $e){								}				if (fwrite($handle,"") === FALSE) {					break;//???				}				unset($handle);								//graph				try{					$this->make_load_graph($date_from,$date_to,$cache);				}				catch (Exception $e){								}												unlink($busy_flag);			}			$tries--;		}				$contents = (!isset($contents))? "":$contents;		//echo $contents;				$this->addModel(new ModelVars(			array('name'=>'Vars',				'id'=>'Graph_Model',				'values'=>array(					new Field('mime',DT_STRING,						array('value'=>'image/png')),									new Field('img',DT_STRING,						array('value'=>base64_encode($contents)))					)				)			)		);	}	public function make_plant_load($pm){		$date_from = $pm->getParamValue('date_time_from');		$date_to = $pm->getParamValue('date_time_to');		//$date = mktime();		//$dt = getdate($date);		//$date = mktime(0,0,0,$dt['mon'],$dt['mday'],$dt['year']);		$cache = Graph_Controller::plant_load_cache_name($date_from,$date_to);				//		//$this->make_load_graph($date,$cache);		//exit;				$busy_flag = Graph_Controller::CACHE_PATH.'plant_load_'.date("d_m_Y",$date).'.bsy';		if (file_exists($busy_flag)		|| file_exists($cache)){			return;		}		//make new graph		try{			$handle = fopen($busy_flag, "w");		}		catch (Exception $e){						}		if (fwrite($handle,"") === FALSE) {			return;//???		}		unset($handle);				//graph		try{			$this->make_load_graph($date_from,$date_to,$cache);		}		catch (Exception $e){						}								unlink($busy_flag);	}		public static function getShiftBounds($dbLink,$dateTime,&$from,&$to){		$ar = $dbLink->query_first(			sprintf("SELECT			d1,d2 FROM get_shift_bounds('%s')			AS (d1 timestamp, d2 timestamp)",date('Y-m-d H:i:s',$dateTime))			);		$from = strtotime($ar['d1']);		$to = strtotime($ar['d2']);	}	public static function clearCacheOnDate($dbLink,$dateTime){		$shift_from = null;		$shift_to = null;		Graph_Controller::getShiftBounds($dbLink,$dateTime,$shift_from,$shift_to);		Graph_Controller::clearCache($shift_from,$shift_to);		}		public static function clearCacheOnOrderId($dbLink,$orderId){		$ar = $dbLink->query_first(			sprintf("SELECT d1,d2			FROM get_shift_bounds(				(SELECT date_time FROM orders WHERE id=%d))			AS (d1 timestamp, d2 timestamp)",				$orderId)			);		if (is_array($ar)){			Graph_Controller::clearCache(strtotime($ar["d1"]),				strtotime($ar["d2"]));		}		}			public static function clearCacheOnShipId($dbLink,$shipId){		$ar = $dbLink->query_first(			sprintf("SELECT d1,d2			FROM get_shift_bounds(				(SELECT ship_date_time				FROM shipments WHERE id=%d))			AS (d1 timestamp, d2 timestamp)",				$shipId)			);		if (is_array($ar)){			Graph_Controller::clearCache(strtotime($ar["d1"]),				strtotime($ar["d2"]));		}		}			public function clear_cache($pm){		$date_from = $pm->getParamValue('date_from');		$date_to = $pm->getParamValue('date_to');		Graph_Controller::clearCache($date_from,$date_to,TRUE);	}}<![CDATA[?>]]></xsl:template></xsl:stylesheet>